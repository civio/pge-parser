require 'nokogiri'
require 'open-uri'

# Basic parser for any sort of breakdowns that we don't need to parse fully, i.e. pages like [1].
# It supports getting a particular cell by position or text description.
#
# [1]: http://www.sepg.pap.minhap.gob.es/Presup/PGE2014proyecto/MaestroDocumentos/PGE-ROM/doc/HTM/N_14_A_R_6_2_801_1_3.HTM
#
class GenericBreakdown < BaseBreakdown
  def initialize(filename)
    @filename = filename
  end

  def year
    @filename =~ /N_(\d\d)_/
    $1
  end

  def is_final
    @filename =~ /N_(\d\d)_([ASE])_/
    return $2 != 'A'  # S is final for 2007 and before; E for 2008+
  end

  # Retrieve a cell given its row and column position (-1 means last, as in Ruby)
  def get_item_by_position(row_position, column_position)
    # Get the row we want
    row = get_data_rows[row_position]

    # Return the column we want
    columns = row.css('td').map{|td| td.text.strip}
    columns[column_position]
  end

  # Retrieve the right-most column for the row with the given description
  def get_value_by_description(description, description_position=1)
    # Get rows in HTML table, skipping header
    get_data_rows.map do |row|
      # Up to 2018, included, data came in a table... Then it didn't. :/
      data_element_name = row.at('td') ? 'td' : 'span'
      columns = row.css(data_element_name).map{|el| el.text.strip}
      next if columns[description_position]!=description

      # We got to the right row, just return the rightmost column
      return columns[-1]  
    end
  end

  #Â Let's see how long this lasts :/
  def get_url()
    # URLs for years 2008- are inconsistent with later years in the ministry's site
    "http://www.sepg.pap.minhap.gob.es/Presup/PGE20#{year}#{is_final ? 'Ley' : 'Proyecto'}/" \
      "#{year.to_i<=8 ? '' : 'MaestroDocumentos/'}" \
      "PGE-ROM/doc/HTM/#{File.basename(@filename)}"
  end

  private

  def get_data_rows
    # Up to 2018, included, data came in a table...
    if doc.at('table')
      rows = doc.css('table.S0ESTILO8 tr')[1..-1] # 2008 onwards (earlier?)
      if rows.nil?
        # 2014 is the year of the autogenerated messy CSS: we look for a table header
        header = doc.css('table > thead')[0]
        rows = header.parent.css('tr')[1..-1]
      end

    # But then they switched to some ass-ugly divs with no semantic structure
    else
      rows = doc.css('body > div > div:nth-child(3) > div:nth-child(2) > div')
    end

    rows
  end

  def doc
    @doc = Nokogiri::HTML(open(@filename)) if @doc.nil?  # Lazy parsing of doc, only when needed
    @doc
  end
end